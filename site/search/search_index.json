{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Graph Neural Network Cancer Drug Response (gnnCDR) A major goal in precision oncology is to match a patient and tumor to the optimal therapeutic treatment. Research towards these goals include identifying drug combinations or repurposing drugs used in other domains to address limitations in oncology treatment durability, drug resistance and patient toxicity. We seek to accelerate and improve drug development by developing algorithms that improve how we identify therapeutic drug combinations based on \u2018omic features and improve predictions of drug response. Project Summary Ineffective or limited precision oncology treatments are a cause of patient mortality. We seek to address this challenge by improving pre-clinical drug repurposing and drug combination discovery. We highlight the methodological challenge of training drug response models using single-drug data that will generalize well to multi-drug perturbations. We operate on the premise that protein-protein interactions mediate cellular drug response and hypothesize that incorporating this prior knowledge in a deep learning framework is liable to overcome limitations in drug response modeling and enable novel approaches to drug prioritization. To do this we will predict drug perturbed mRNA expression from intrinsic cancer features using graph neural networks that operate on literature curated protein-protein and drug-target interactions. In preliminary research, we have developed a synthetic data generator, which we have used to show promise and feasibility of our approach. We will develop and evaluate our methods using synthetic data before applying it to cancer cell line drug-perturbed mRNA expression datasets to prioritize drug combinations. Therapeutic candidates will be empirically evaluated in Dr. Gordon Mills\u2019 and Dr. Jeffrey Tyner\u2019s labs. Successful implementation of our methods will enable tractable and robust drug prioritization based on nuanced therapeutic goals such as user-defined cell type selective response.","title":"Home"},{"location":"#graph-neural-network-cancer-drug-response-gnncdr","text":"A major goal in precision oncology is to match a patient and tumor to the optimal therapeutic treatment. Research towards these goals include identifying drug combinations or repurposing drugs used in other domains to address limitations in oncology treatment durability, drug resistance and patient toxicity. We seek to accelerate and improve drug development by developing algorithms that improve how we identify therapeutic drug combinations based on \u2018omic features and improve predictions of drug response.","title":"Graph Neural Network Cancer Drug Response (gnnCDR)"},{"location":"#project-summary","text":"Ineffective or limited precision oncology treatments are a cause of patient mortality. We seek to address this challenge by improving pre-clinical drug repurposing and drug combination discovery. We highlight the methodological challenge of training drug response models using single-drug data that will generalize well to multi-drug perturbations. We operate on the premise that protein-protein interactions mediate cellular drug response and hypothesize that incorporating this prior knowledge in a deep learning framework is liable to overcome limitations in drug response modeling and enable novel approaches to drug prioritization. To do this we will predict drug perturbed mRNA expression from intrinsic cancer features using graph neural networks that operate on literature curated protein-protein and drug-target interactions. In preliminary research, we have developed a synthetic data generator, which we have used to show promise and feasibility of our approach. We will develop and evaluate our methods using synthetic data before applying it to cancer cell line drug-perturbed mRNA expression datasets to prioritize drug combinations. Therapeutic candidates will be empirically evaluated in Dr. Gordon Mills\u2019 and Dr. Jeffrey Tyner\u2019s labs. Successful implementation of our methods will enable tractable and robust drug prioritization based on nuanced therapeutic goals such as user-defined cell type selective response.","title":"Project Summary"},{"location":"pages_experiments/l1000_cond/","text":"","title":"L1000 Data Conditions"},{"location":"pages_experiments/noise/","text":"Noise Experiments","title":"Noise"},{"location":"pages_experiments/noise/#noise-experiments","text":"","title":"Noise Experiments"},{"location":"pages_experiments/ppi_dti_error/","text":"PPI/DTI Error Experiments","title":"PPI/DTI Error"},{"location":"pages_experiments/ppi_dti_error/#ppidti-error-experiments","text":"","title":"PPI/DTI Error Experiments"},{"location":"pages_experiments/sparsity/","text":"Sparsity Experiments","title":"Sparsity"},{"location":"pages_experiments/sparsity/#sparsity-experiments","text":"","title":"Sparsity Experiments"},{"location":"pages_gnnCDR/gnncdr/","text":"GNN CDR Overview","title":"GNNCDR"},{"location":"pages_gnnCDR/gnncdr/#gnn-cdr-overview","text":"","title":"GNN CDR Overview"},{"location":"pages_gnnCDR/naive/","text":"Naive Neural Network model (No prior knowledge)","title":"Naive Model"},{"location":"pages_gnnCDR/naive/#naive-neural-network-model-no-prior-knowledge","text":"","title":"Naive Neural Network model (No prior knowledge)"},{"location":"pages_real_data/cmap_cmpd/","text":"CMAP Compound data","title":"CMAP Compound Data"},{"location":"pages_real_data/cmap_cmpd/#cmap-compound-data","text":"","title":"CMAP Compound data"},{"location":"pages_real_data/depmap/","text":"Cancer Dependency Map","title":"DepMap"},{"location":"pages_real_data/depmap/#cancer-dependency-map","text":"","title":"Cancer Dependency Map"},{"location":"pages_real_data/fi/","text":"Reactome Functional Interaction (FI) network","title":"Reactome FI"},{"location":"pages_real_data/fi/#reactome-functional-interaction-fi-network","text":"","title":"Reactome Functional Interaction (FI) network"},{"location":"pages_real_data/l1000/","text":"Overview L1000","title":"LINCS L1000"},{"location":"pages_real_data/l1000/#overview-l1000","text":"","title":"Overview L1000"},{"location":"pages_synthetic_data/example/","text":"Example","title":"Example"},{"location":"pages_synthetic_data/example/#example","text":"","title":"Example"},{"location":"pages_synthetic_data/overview/","text":"Overview","title":"Overview"},{"location":"pages_synthetic_data/overview/#overview","text":"","title":"Overview"},{"location":"pages_usage/mkdocs_guides/","text":"Links to mkdocs guides Material General Toc Material Color Palette","title":"Mkdocs Help"},{"location":"pages_usage/mkdocs_guides/#links-to-mkdocs-guides","text":"","title":"Links to mkdocs guides"},{"location":"pages_usage/mkdocs_guides/#material","text":"General Toc Material Color Palette","title":"Material"},{"location":"pages_usage/syntax_examples/","text":"List of random syntax examples Downloading Data download_abcd_batch.sh - Script to call NDA downloader download.py - NDA downloader (Fair Lab) . File Path Func ./ download_abcd_batch.sh docs Script to call NDA downloader ../../ download.py docs NDA data downloader Name Required Details Python Markdown Yes Python Markdown must be installed as it is the Markdown parser that is being used. Pygments (optional) No If Pygments Syntax highlighting is desired, Pygments must be installed. This can be omitted, and code blocks will be formatted for use with JavaScript code highlighters. Autoembed table from csv Dynamically embedding a table from a .csv Adding a new table This is syntax to ad a new table Syntax | col1 | col2 | col3 | col4 | col5 | col6 | col7 | |-------:|-------:|-------:|-------:|-------:|-------:|-------:| | 1 | 2 | 3 | 4 | 5 | 6 | 7 | | 4 | 5 | 6 | 7 | 8 | 9 | 10 | | 7 | 8 | 9 | 10 | 11 | 12 | 13 | output col1 col2 col3 col4 col5 col6 col7 1 2 3 4 5 6 7 4 5 6 7 8 9 10 7 8 9 10 11 12 13 ### Add entire script Code snippets add line numer and highlight lines 2 and language linenums=\"1\" hl_lines=\"2 3\" Bug 1 2 3 >>> import markdown >>> text = \"A link https://google.com\" >>> html = markdown . markdown ( text , extensions = [ 'pymdownx.magiclink' ]) Note Output Task List item 1 item A item B more text item a item b item c item C item 2 item 3 Markdown Task List - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 Note test test for note Todo test test for note Tldr test test for note Important test test for note Done test test for note Faq test test for note Attention test test for note Error test test for note Bug test test for note Quote test test for note Reminder I still need to download the data Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Inline Highlighted Code Example Output Here is some code: import pymdownx ; pymdownx . __version__ The mock shebang will be treated like text here: #!js var test = 0; . Markdown Here is some code: `#!py3 import pymdownx; pymdownx.__version__`. The mock shebang will be treated like text here: ` #!js var test = 0; `. The mock shebang will be treated like text here: #!js var test = 0; . srun $PYTHON_ENV download.py \\ -i $manifest \\ -o $outdir \\ -s $sublist \\ -l $logfiles \\ -d $subset -p 6 import pandas as pd import numpy as np def test_func ( var1 , var2 ): return x Clinical Data data_subsets.txt - List of derivatives subject_list.txt - List of subjects","title":"Mkdocs Syntax"},{"location":"pages_usage/syntax_examples/#list-of-random-syntax-examples","text":"","title":"List of random syntax examples"},{"location":"pages_usage/syntax_examples/#downloading-data","text":"download_abcd_batch.sh - Script to call NDA downloader download.py - NDA downloader (Fair Lab) . File Path Func ./ download_abcd_batch.sh docs Script to call NDA downloader ../../ download.py docs NDA data downloader Name Required Details Python Markdown Yes Python Markdown must be installed as it is the Markdown parser that is being used. Pygments (optional) No If Pygments Syntax highlighting is desired, Pygments must be installed. This can be omitted, and code blocks will be formatted for use with JavaScript code highlighters.","title":"Downloading Data"},{"location":"pages_usage/syntax_examples/#autoembed-table-from-csv","text":"Dynamically embedding a table from a .csv Adding a new table This is syntax to ad a new table Syntax | col1 | col2 | col3 | col4 | col5 | col6 | col7 | |-------:|-------:|-------:|-------:|-------:|-------:|-------:| | 1 | 2 | 3 | 4 | 5 | 6 | 7 | | 4 | 5 | 6 | 7 | 8 | 9 | 10 | | 7 | 8 | 9 | 10 | 11 | 12 | 13 | output col1 col2 col3 col4 col5 col6 col7 1 2 3 4 5 6 7 4 5 6 7 8 9 10 7 8 9 10 11 12 13 ### Add entire script","title":"Autoembed table from csv"},{"location":"pages_usage/syntax_examples/#code-snippets","text":"add line numer and highlight lines 2 and language linenums=\"1\" hl_lines=\"2 3\" Bug 1 2 3 >>> import markdown >>> text = \"A link https://google.com\" >>> html = markdown . markdown ( text , extensions = [ 'pymdownx.magiclink' ]) Note Output Task List item 1 item A item B more text item a item b item c item C item 2 item 3 Markdown Task List - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 Note test test for note Todo test test for note Tldr test test for note Important test test for note Done test test for note Faq test test for note Attention test test for note Error test test for note Bug test test for note Quote test test for note Reminder I still need to download the data Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Inline Highlighted Code Example Output Here is some code: import pymdownx ; pymdownx . __version__ The mock shebang will be treated like text here: #!js var test = 0; . Markdown Here is some code: `#!py3 import pymdownx; pymdownx.__version__`. The mock shebang will be treated like text here: ` #!js var test = 0; `. The mock shebang will be treated like text here: #!js var test = 0; . srun $PYTHON_ENV download.py \\ -i $manifest \\ -o $outdir \\ -s $sublist \\ -l $logfiles \\ -d $subset -p 6 import pandas as pd import numpy as np def test_func ( var1 , var2 ): return x","title":"Code snippets"},{"location":"pages_usage/syntax_examples/#clinical-data","text":"data_subsets.txt - List of derivatives subject_list.txt - List of subjects","title":"Clinical Data"}]}